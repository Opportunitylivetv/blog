<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="https://bitworking.org/news/feed/index.atom" rel="self" type="application/atom+xml" /><link href="https://bitworking.org/" rel="alternate" type="text/html" /><updated>2017-08-04T07:17:23-04:00</updated><id>https://bitworking.org/</id><title type="html">BitWorking</title><subtitle>Joe Gregorio - REST, Web, Python, Go, APIs, Dad, Husband, Maker, or any linear combination of such. Googler.
</subtitle><entry><title type="html">What a bold platform really looks like.</title><link href="https://bitworking.org/news/2017/07/what-a-bold-platform-really-looks-like" rel="alternate" type="text/html" title="What a bold platform really looks like." /><published>2017-07-29T00:00:00-04:00</published><updated>2017-07-29T00:00:00-04:00</updated><id>https://bitworking.org/news/2017/07/what-a-bold-platform-really-looks-like</id><content type="html" xml:base="https://bitworking.org/news/2017/07/what-a-bold-platform-really-looks-like">&lt;p&gt;&lt;a href=&quot;http://www.huffingtonpost.com/entry/chuck-schumer-single-payer_us_5974b05be4b00e4363e0164e&quot;&gt;Chuck Schumer Says Senate Democrats Are Open To Single-Payer Health Care&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“We’re going to look at broader things [for health care],” he said.
“Single-payer is one of them.. Many things are on the table. Medicare for
people above 55 is on the table. A buy-in to Medicare is on the table.
Buy-in to Medicaid is on the table.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yeah, &lt;strong&gt;bold&lt;/strong&gt; leadership always comes from phrases like “on the table”. Don’t
you remember &lt;a href=&quot;http://www.telegraph.co.uk/news/winston-churchill/11366880/Winston-Churchills-10-most-important-speeches.html&quot;&gt;Churchill’s famous
speech&lt;/a&gt;?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Going to the end is on the table. Fighting in France is on the table, fighting on the
seas and oceans is a possibility, fighting with growing confidence and growing strength
in the air is something we’re certainly willing to talk about.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The leadership on display here is just pathetic.&lt;/p&gt;

&lt;p&gt;A simple bold platform is very easy to state, and also one that’s easy to
support. Additionally, if you keep it direct you can more easily construct
radical arguments to move the &lt;a href=&quot;https://en.wikipedia.org/wiki/Overton_window&quot;&gt;Overton&lt;/a&gt; window.
For example, on just three issues, the platform could be boldly and simply
stated, and the Overton postions below are the ones you get some people to
state, so that the platform position looks like a reasonable compromise.&lt;/p&gt;

&lt;h2 id=&quot;healthcare&quot;&gt;Healthcare&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Platform&lt;/strong&gt;: Medicare for all.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Overton&lt;/strong&gt;: Let’s nationalize hospitals and shut down the health insurance industry.&lt;/p&gt;

&lt;h2 id=&quot;education&quot;&gt;Education&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Platform&lt;/strong&gt;: Free college education (up to a bachelor’s degree).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Overton&lt;/strong&gt;: Let’s nationalize the education system and extend mandatory education from a high school diploma to a bachelor’s degree.&lt;/p&gt;

&lt;h2 id=&quot;taxes&quot;&gt;Taxes&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Platform&lt;/strong&gt;: Return to a progressive tax system where the wealthy pay their
fair share and loopholes are closed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Overton&lt;/strong&gt;: A top marginal income tax rate of 90%.&lt;/p&gt;

&lt;p&gt;Now aren’t those a lot more appealing than the mealy mouthed alternatives?&lt;/p&gt;</content><author><name></name></author><summary type="html">Chuck Schumer Says Senate Democrats Are Open To Single-Payer Health Care</summary></entry><entry><title type="html">D3 and L-Systems with live controls and Redux</title><link href="https://bitworking.org/news/2017/07/d3-and-l-systems-with-live-controls-and-redux" rel="alternate" type="text/html" title="D3 and L-Systems with live controls and Redux" /><published>2017-07-23T00:00:00-04:00</published><updated>2017-07-23T00:00:00-04:00</updated><id>https://bitworking.org/news/2017/07/d3-and-l-systems-with-live-controls-and-redux</id><content type="html" xml:base="https://bitworking.org/news/2017/07/d3-and-l-systems-with-live-controls-and-redux">&lt;p&gt;
  This is just &lt;a href=&quot;/news/2017/07/d3-and-l-systems-with-live-controls&quot;&gt;D3
    and L-Systems with live controls&lt;/a&gt;, but now state is managed by &lt;a
    href=&quot;http://redux.js.org/&quot;&gt;Redux&lt;/a&gt;. Oh, and also arrow functions,
  because &lt;a href=&quot;https://caniuse.com/#feat=arrow-functions&quot;&gt;they're
    available everywhere I care about&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
  I've been reading about Redux and wanted to try it out. It seems
  nice, as it forced me to consolidate everything about page state, which
  caused me to clean up the code quite a bit. I like that in a tool. It's
  also the reason I like Go and way it handles 'error', it forces me to think
  about the not-happy-path as opposed to the happy-path, which always makes
  my code better.
&lt;/p&gt;
&lt;p&gt;
  I think it's interesting that there isn't a library to map the state into
  the URL, at least I couldn't find anything that wasn't either a React based
  solution or a full blown routing package. I've got some &lt;a
    href=&quot;https://github.com/google/skia-buildbot/blob/32ea496dbdc5865230d25073ac44f27ce16bb735/res/js/common.js#L720&quot;&gt;code that already
    does that&lt;/a&gt;, I wonder if it would be useful to break that out as its own
  library.
&lt;/p&gt;

  &lt;label for=&quot;linkDistance&quot;&gt;Link Distance:&lt;/label&gt;
  &lt;input type=&quot;range&quot; name=&quot;linkDistance&quot; id=&quot;linkDistance&quot; min=1 max=10 /&gt;
  &lt;span style=&quot;padding: 0 10px;&quot; id=linkDistanceDisplay&gt;&lt;/span&gt;
  &lt;br&gt;
  &lt;label for=&quot;linkStrength&quot;&gt;Link Strength:&lt;/label&gt;
  &lt;input type=&quot;range&quot; name=&quot;linkStrength&quot; id=&quot;linkStrength&quot; min=0.01 max=4 step=&quot;0.01&quot; /&gt;
  &lt;span style=&quot;padding: 0 10px;&quot; id=linkStrengthDisplay&gt;&lt;/span&gt;
  &lt;br&gt;
  &lt;label for=&quot;chargeStrength&quot;&gt;Charge Strength:&lt;/label&gt;
  &lt;input type=&quot;range&quot; name=&quot;chargeStrength&quot; id=&quot;chargeStrength&quot; min=&quot;-10&quot; max=&quot;-0.01&quot; step=&quot;0.01&quot; /&gt;
  &lt;span style=&quot;padding: 0 10px;&quot; id=chargeStrengthDisplay&gt;&lt;/span&gt;
  &lt;br&gt;
  &lt;canvas width=&quot;600&quot; height=&quot;600&quot;&gt;&lt;/canvas&gt;
  &lt;script src=&quot;https://d3js.org/d3.v4.min.js&quot;&gt;&lt;/script&gt;
  &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/redux/3.7.2/redux.min.js&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
  &lt;script id=src type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;
    (function () {
      function E(s) { return s ? (rules[s[0]] + E(s.substr(1))) : &quot;&quot; }
      rules = {
        X: &quot;F-[[X]+X]+F[+FX]-X&quot;,
        F: &quot;FF&quot;,
        &quot;+&quot;: &quot;+&quot;,
        &quot;-&quot;: &quot;-&quot;,
        &quot;[&quot;: &quot;[&quot;,
        &quot;]&quot;: &quot;]&quot;,
      }
      var start = {id: &quot;0&quot;};
      var graph = {
        &quot;nodes&quot;: [start],
        &quot;links&quot;: [],
      };
      var n = 0;
      var st = [start];
      L = E(E(E(E(E(&quot;X&quot;))))).split('').forEach(function(ch) {
        if (ch == &quot;[&quot;) {
          n += 1;
          var node = {id: &quot;&quot;+n};
          st.push(node);
          graph.nodes.push(node);
          graph.links.push(
            {
              source: st[st.length-1].id,
              target: st[st.length-2].id,
            },
          );
        } else if (ch == &quot;]&quot;) {
          st.pop()
        }
      });

      var canvas = document.querySelector(&quot;canvas&quot;),
            context = canvas.getContext(&quot;2d&quot;),
            width = canvas.width,
            height = canvas.height;

      var dup = (o) =&gt; JSON.parse(JSON.stringify(o));
      var $ = (id) =&gt; document.getElementById(id);

      var defaultState = {
        linkStrength: 0.5,
        linkDistance: 3,
        chargeStrength: -1,
      };

      var linkForce = d3.forceLink().iterations(5).id(function(d) { return d.id; });
      var charge = d3.forceManyBody();
      var simulation = d3.forceSimulation()
          .force(&quot;link&quot;, linkForce)
          .force(&quot;charge&quot;, charge)
          .force(&quot;center&quot;, d3.forceCenter(width / 2, height / 2));

      var updateState = (state = defaultState, action) =&gt; {
        state = dup(state);
        state[action.type] = action.value;
        return state;
      }

      var store = Redux.createStore(updateState);

      function render() {
        var state = store.getState();
        $('linkStrength').value = state.linkStrength;
        $('linkDistance').value = state.linkDistance;
        $('chargeStrength').value = state.chargeStrength;
        $('linkStrengthDisplay').innerText = state.linkStrength;
        $('linkDistanceDisplay').innerText = state.linkDistance;
        $('chargeStrengthDisplay').innerText = state.chargeStrength;
        linkForce.distance(state.linkDistance).strength(state.linkStrength);
        charge.strength(state.chargeStrength);
        simulation.alphaTarget(0.1).restart();
      }

      store.subscribe(render);
      render();

      simulation
        .nodes(graph.nodes)
        .on(&quot;tick&quot;, ticked);

      simulation.force(&quot;link&quot;)
        .links(graph.links);

      d3.select(canvas)
        .call(d3.drag()
          .container(canvas)
            .subject(dragsubject)
            .on(&quot;start&quot;, dragstarted)
            .on(&quot;drag&quot;, dragged)
            .on(&quot;end&quot;, dragended));

      function ticked() {
        context.clearRect(0, 0, width, height);

        context.beginPath();
        graph.links.forEach(drawLink);
        context.strokeStyle = &quot;#343&quot;;
        context.fillStyle = &quot;#363&quot;;
        context.stroke();

        context.beginPath();
        graph.nodes.forEach(drawNode);
        context.fill();
      }

      function dragsubject() {
        return simulation.find(d3.event.x, d3.event.y);
      }

      function dragstarted() {
          if (!d3.event.active) simulation.alphaTarget(0.3).restart();
          d3.event.subject.fx = d3.event.subject.x;
          d3.event.subject.fy = d3.event.subject.y;
      }

      function dragged() {
          d3.event.subject.fx = d3.event.x;
          d3.event.subject.fy = d3.event.y;
      }

      function dragended() {
          if (!d3.event.active) simulation.alphaTarget(0);
          d3.event.subject.fx = null;
          d3.event.subject.fy = null;
      }

      function drawLink(d) {
          context.moveTo(d.source.x, d.source.y);
          context.lineTo(d.target.x, d.target.y);
      }

      function drawNode(d) {
          context.moveTo(d.x + 3, d.y);
          context.arc(d.x, d.y, 3, 0, 2 * Math.PI);
      }

      function dispatchFromEvent(id, event, xform) {
        $(id).addEventListener(event, function(e) {
          store.dispatch({
            type: e.target.id,
            value: xform(e),
          });
        });
      }

      dispatchFromEvent('linkDistance', 'input', (e) =&gt; +e.target.value);
      dispatchFromEvent('linkStrength', 'input', (e) =&gt; Math.abs(+e.target.value));
      dispatchFromEvent('chargeStrength', 'input', (e) =&gt; -Math.abs(+e.target.value));

    })();
  &lt;/script&gt;

  &lt;pre&gt;&lt;code id=code&gt;&lt;/code&gt;&lt;/pre&gt;
  &lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;
    document.getElementById('code').textContent = document.getElementById('src').textContent;
  &lt;/script&gt;</content><author><name></name></author><summary type="html">This is just D3 and L-Systems with live controls, but now state is managed by Redux. Oh, and also arrow functions, because they're available everywhere I care about.</summary></entry><entry><title type="html">D3 and L-Systems with live controls</title><link href="https://bitworking.org/news/2017/07/d3-and-l-systems-with-live-controls" rel="alternate" type="text/html" title="D3 and L-Systems with live controls" /><published>2017-07-22T00:00:00-04:00</published><updated>2017-07-22T00:00:00-04:00</updated><id>https://bitworking.org/news/2017/07/d3-and-l-systems-with-live-controls</id><content type="html" xml:base="https://bitworking.org/news/2017/07/d3-and-l-systems-with-live-controls">&lt;p&gt;
  An &lt;a href=&quot;/news/2017/07/d3-and-l-systems&quot;&gt;L-System fed into d3-force&lt;/a&gt;, but now with controls that allow you to
  change some of the simulation parameters.
&lt;/p&gt;

  &lt;label for=&quot;linkDistance&quot;&gt;Link Distance:&lt;/label&gt;
  &lt;input type=&quot;range&quot; name=&quot;linkDistance&quot; id=&quot;linkDistance&quot; min=1 max=10 value=&quot;3&quot; /&gt;
  &lt;span style=&quot;padding: 0 10px;&quot; id=linkDistanceDisplay&gt;&lt;/span&gt;
  &lt;br&gt;
  &lt;label for=&quot;linkStrength&quot;&gt;Link Strength:&lt;/label&gt;
  &lt;input type=&quot;range&quot; name=&quot;linkStrength&quot; id=&quot;linkStrength&quot; value=&quot;0.5&quot; min=0.01 max=4 step=&quot;0.01&quot; /&gt;
  &lt;span style=&quot;padding: 0 10px;&quot; id=linkStrengthDisplay&gt;&lt;/span&gt;
  &lt;br&gt;
  &lt;label for=&quot;chargeStrength&quot;&gt;Charge Strength:&lt;/label&gt;
  &lt;input type=&quot;range&quot; name=&quot;chargeStrength&quot; id=&quot;chargeStrength&quot; value=&quot;-1&quot; min=&quot;-10&quot; max=&quot;-0.01&quot; step=&quot;0.01&quot; /&gt;
  &lt;span style=&quot;padding: 0 10px;&quot; id=chargeStrengthDisplay&gt;&lt;/span&gt;
  &lt;br&gt;
  &lt;canvas width=&quot;600&quot; height=&quot;600&quot;&gt;&lt;/canvas&gt;
  &lt;script src=&quot;https://d3js.org/d3.v4.min.js&quot;&gt;&lt;/script&gt;
  &lt;script id=src type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;
    (function () {
      function E(s) { return s ? (rules[s[0]] + E(s.substr(1))) : &quot;&quot; }
      rules = {
        X: &quot;F-[[X]+X]+F[+FX]-X&quot;,
        F: &quot;FF&quot;,
        &quot;+&quot;: &quot;+&quot;,
        &quot;-&quot;: &quot;-&quot;,
        &quot;[&quot;: &quot;[&quot;,
        &quot;]&quot;: &quot;]&quot;,
      }
      var start = {id: &quot;0&quot;};
      var graph = {
        &quot;nodes&quot;: [start],
        &quot;links&quot;: [],
      };
      var n = 0;
      var st = [start];
      L = E(E(E(E(E(&quot;X&quot;))))).split('').forEach(function(ch) {
        if (ch == &quot;[&quot;) {
          n += 1;
          var node = {id: &quot;&quot;+n};
          st.push(node);
          graph.nodes.push(node);
          graph.links.push(
            {
              source: st[st.length-1].id,
              target: st[st.length-2].id,
            },
          );
        } else if (ch == &quot;]&quot;) {
          st.pop()
        }
      });

      var canvas = document.querySelector(&quot;canvas&quot;),
            context = canvas.getContext(&quot;2d&quot;),
            width = canvas.width,
            height = canvas.height;

      var linkDistance = 3;
      var linkStrength = 0.5;
      var linkForce = d3.forceLink().distance(linkDistance).strength(linkStrength).iterations(5).id(function(d) { return d.id; });
      var chargeStrength = -1;
      var charge = d3.forceManyBody().strength(chargeStrength);
      simulation = d3.forceSimulation()
          .force(&quot;link&quot;, linkForce)
          .force(&quot;charge&quot;, charge)
          .force(&quot;center&quot;, d3.forceCenter(width / 2, height / 2))

      function updateSimulation() {
        linkForce.distance(linkDistance).strength(linkStrength);
        charge.strength(chargeStrength);
        simulation.alphaTarget(0.1).restart();
      }

      simulation
        .nodes(graph.nodes)
        .on(&quot;tick&quot;, ticked);

      simulation.force(&quot;link&quot;)
        .links(graph.links);

      d3.select(canvas)
        .call(d3.drag()
          .container(canvas)
            .subject(dragsubject)
            .on(&quot;start&quot;, dragstarted)
            .on(&quot;drag&quot;, dragged)
            .on(&quot;end&quot;, dragended));

      function ticked() {
        context.clearRect(0, 0, width, height);

        context.beginPath();
        graph.links.forEach(drawLink);
        context.strokeStyle = &quot;#343&quot;;
        context.fillStyle = &quot;#363&quot;;
        context.stroke();

        context.beginPath();
        graph.nodes.forEach(drawNode);
        context.fill();
      }

      function dragsubject() {
        return simulation.find(d3.event.x, d3.event.y);
      }

      function dragstarted() {
          if (!d3.event.active) simulation.alphaTarget(0.3).restart();
          d3.event.subject.fx = d3.event.subject.x;
          d3.event.subject.fy = d3.event.subject.y;
      }

      function dragged() {
          d3.event.subject.fx = d3.event.x;
          d3.event.subject.fy = d3.event.y;
      }

      function dragended() {
          if (!d3.event.active) simulation.alphaTarget(0);
          d3.event.subject.fx = null;
          d3.event.subject.fy = null;
      }

      function drawLink(d) {
          context.moveTo(d.source.x, d.source.y);
          context.lineTo(d.target.x, d.target.y);
      }

      function drawNode(d) {
          context.moveTo(d.x + 3, d.y);
          context.arc(d.x, d.y, 3, 0, 2 * Math.PI);
      }

      document.getElementById('linkDistance').addEventListener('input', function(e) {
        linkDistance = +e.target.value;
        document.getElementById('linkDistanceDisplay').innerText = linkDistance;
        updateSimulation();
      });

      document.getElementById('linkStrength').addEventListener('input', function(e) {
        linkStrength = +e.target.value;
        if (linkStrength &lt; 0) {
          linkStrength = -linkStrength;
          e.target.value = linkStrength;
        }
        document.getElementById('linkStrengthDisplay').innerText = linkStrength;
        updateSimulation();
      });

      document.getElementById('chargeStrength').addEventListener('input', function(e) {
        chargeStrength = +e.target.value;
        if (chargeStrength &gt; 0) {
          chargeStrength = -chargeStrength;
          e.target.value = chargeStrength;
        }
        document.getElementById('chargeStrengthDisplay').innerText = chargeStrength;
        updateSimulation();
      });

    })();
  &lt;/script&gt;

  &lt;pre&gt;&lt;code id=code&gt;&lt;/code&gt;&lt;/pre&gt;
  &lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;
    document.getElementById('code').textContent = document.getElementById('src').textContent;
  &lt;/script&gt;</content><author><name></name></author><summary type="html">An L-System fed into d3-force, but now with controls that allow you to change some of the simulation parameters.</summary></entry><entry><title type="html">D3 and L-Systems</title><link href="https://bitworking.org/news/2017/07/d3-and-l-systems" rel="alternate" type="text/html" title="D3 and L-Systems" /><published>2017-07-20T00:00:00-04:00</published><updated>2017-07-20T00:00:00-04:00</updated><id>https://bitworking.org/news/2017/07/d3-and-l-systems</id><content type="html" xml:base="https://bitworking.org/news/2017/07/d3-and-l-systems">&lt;p&gt;
  So we know &lt;a
    href=&quot;https://bitworking.org/news/2017/07/l-systems&quot;&gt;L-Systems&lt;/a&gt; are
  fun. What if we let &lt;a href=&quot;https://github.com/d3/d3-force&quot;&gt;d3-force&lt;/a&gt;
  layout the nodes of the L-System?
&lt;/p&gt;

  &lt;canvas width=&quot;600&quot; height=&quot;600&quot;&gt;&lt;/canvas&gt;
  &lt;script src=&quot;https://d3js.org/d3.v4.min.js&quot;&gt;&lt;/script&gt;
  &lt;script id=src type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;
    (function () {
      function E(s) { return s ? (rules[s[0]] + E(s.substr(1))) : &quot;&quot; }
      rules = {
        X: &quot;F-[[X]+X]+F[+FX]-X&quot;,
        F: &quot;FF&quot;,
        &quot;+&quot;: &quot;+&quot;,
        &quot;-&quot;: &quot;-&quot;,
        &quot;[&quot;: &quot;[&quot;,
        &quot;]&quot;: &quot;]&quot;,
      }
      var start = {id: &quot;0&quot;};
      var graph = {
        &quot;nodes&quot;: [start],
        &quot;links&quot;: [],
      };
      var n = 0;
      var st = [start];
      L = E(E(E(E(E(&quot;X&quot;))))).split('').forEach(function(ch) {
        if (ch == &quot;[&quot;) {
          n += 1;
          var node = {id: &quot;&quot;+n};
          st.push(node);
          graph.nodes.push(node);
          graph.links.push(
            {
              source: st[st.length-1].id,
              target: st[st.length-2].id,
            },
          );
        } else if (ch == &quot;]&quot;) {
          st.pop()
        }
      });

      var canvas = document.querySelector(&quot;canvas&quot;),
            context = canvas.getContext(&quot;2d&quot;),
            width = canvas.width,
            height = canvas.height;

      var simulation = d3.forceSimulation()
          .force(&quot;link&quot;, d3.forceLink().distance(3).strength(0.5).iterations(2).id(function(d) { return d.id; }))
          .force(&quot;charge&quot;, d3.forceManyBody().strength(-1))
          .force(&quot;center&quot;, d3.forceCenter(width / 2, height / 2));

      simulation
        .nodes(graph.nodes)
        .on(&quot;tick&quot;, ticked);

      simulation.force(&quot;link&quot;)
        .links(graph.links);

      d3.select(canvas)
        .call(d3.drag()
          .container(canvas)
            .subject(dragsubject)
            .on(&quot;start&quot;, dragstarted)
            .on(&quot;drag&quot;, dragged)
            .on(&quot;end&quot;, dragended));

      function ticked() {
        context.clearRect(0, 0, width, height);

        context.beginPath();
        graph.links.forEach(drawLink);
        context.strokeStyle = &quot;#343&quot;;
        context.fillStyle = &quot;#363&quot;;
        context.stroke();

        context.beginPath();
        graph.nodes.forEach(drawNode);
        context.fill();
      }

      function dragsubject() {
        return simulation.find(d3.event.x, d3.event.y);
      }

      function dragstarted() {
          if (!d3.event.active) simulation.alphaTarget(0.3).restart();
          d3.event.subject.fx = d3.event.subject.x;
          d3.event.subject.fy = d3.event.subject.y;
      }

      function dragged() {
          d3.event.subject.fx = d3.event.x;
          d3.event.subject.fy = d3.event.y;
      }

      function dragended() {
          if (!d3.event.active) simulation.alphaTarget(0);
          d3.event.subject.fx = null;
          d3.event.subject.fy = null;
      }

      function drawLink(d) {
          context.moveTo(d.source.x, d.source.y);
          context.lineTo(d.target.x, d.target.y);
      }

      function drawNode(d) {
          context.moveTo(d.x + 3, d.y);
          context.arc(d.x, d.y, 3, 0, 2 * Math.PI);
      }

    })();
  &lt;/script&gt;

  &lt;pre&gt;&lt;code id=code&gt;&lt;/code&gt;&lt;/pre&gt;
  &lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;
    document.getElementById('code').textContent = document.getElementById('src').textContent;
  &lt;/script&gt;</content><author><name></name></author><summary type="html">So we know L-Systems are fun. What if we let d3-force layout the nodes of the L-System?</summary></entry><entry><title type="html">Data binding and JS frameworks</title><link href="https://bitworking.org/news/2017/07/data-binding-and-js-frameworks" rel="alternate" type="text/html" title="Data binding and JS frameworks" /><published>2017-07-16T00:00:00-04:00</published><updated>2017-07-16T00:00:00-04:00</updated><id>https://bitworking.org/news/2017/07/data-binding-and-js-frameworks</id><content type="html" xml:base="https://bitworking.org/news/2017/07/data-binding-and-js-frameworks">&lt;p&gt;It was over three years ago that I wrote
&lt;a href=&quot;https://bitworking.org/news/2014/05/zero_framework_manifesto&quot;&gt;No more JS frameworks&lt;/a&gt;, at which time
I was roundly criticized for not understanding that data binding could only be
done via JS framework, the two were inextricably linked, and only 2-way data
binding would do, as one way data binding was for weak-minded fools who
weren’t building real applications. You can find the comments on HN yourself,
I don’t link to that cesspool.&lt;/p&gt;

&lt;p&gt;So, in that context, it was funny to read
&lt;a href=&quot;https://medium.com/@chriscordle/why-angular-2-4-is-too-little-too-late-ea86d7fa0bae&quot;&gt;Why Angular 2/4 Is Too Little, Too Late&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Two way data-binding was a feature in 2013 and Facebook said it was a &lt;strong&gt;bug&lt;/strong&gt;.
It turns out they were &lt;em&gt;right&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The post goes on to explain how the “industry settled on
&lt;a href=&quot;http://redux.js.org/&quot;&gt;Redux&lt;/a&gt;”, which is nice to see that the functionality
is delivered as a standalone library, and &lt;a href=&quot;https://github.com/reactjs/redux/blob/master/LICENSE.md&quot;&gt;MIT Licensed&lt;/a&gt;,
because &lt;a href=&quot;https://issues.apache.org/jira/browse/LEGAL-303&quot;&gt;licenses matter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My only concern is that I believe I too work in the industry and I’ve spent
the last three years delivering applications using
&lt;a href=&quot;https://www.polymer-project.org/&quot;&gt;Polymer&lt;/a&gt;, so I guess I’m not “settled”?&lt;/p&gt;</content><author><name></name></author><summary type="html">It was over three years ago that I wrote No more JS frameworks, at which time I was roundly criticized for not understanding that data binding could only be done via JS framework, the two were inextricably linked, and only 2-way data binding would do, as one way data binding was for weak-minded fools who weren’t building real applications. You can find the comments on HN yourself, I don’t link to that cesspool.</summary></entry><entry><title type="html">Tile Store</title><link href="https://bitworking.org/news/2017/07/tile-store" rel="alternate" type="text/html" title="Tile Store" /><published>2017-07-08T00:00:00-04:00</published><updated>2017-07-08T00:00:00-04:00</updated><id>https://bitworking.org/news/2017/07/tile-store</id><content type="html" xml:base="https://bitworking.org/news/2017/07/tile-store">&lt;p&gt;My team at Google is the infrastructure team for &lt;a href=&quot;https://skia.org&quot;&gt;Skia&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Skia is an open source 2D graphics library which provides common APIs that work
across a variety of hardware and software platforms. It serves as the graphics
engine for Google Chrome and Chrome OS, Android, Mozilla Firefox and Firefox
OS, and many other products.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Skia, being a graphics library, needs to be tested for both performance and
correctness, and being cross-platform, it needs to be tested across a wide
variety of platforms and under different configurations. Skia has a variety of
backends, i.e. the same drawing commands can be directed to be rendered via:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Raster - Using the CPU-only.&lt;/li&gt;
  &lt;li&gt;Ganesh - Skia’s GPU-accelerated backend.&lt;/li&gt;
  &lt;li&gt;PDF - PDF document creation.&lt;/li&gt;
  &lt;li&gt;SVG - An experimental SVG renderer.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of those backends need to be tested across different platforms (Windows,
Android, Linux, Max, iOS), different architectures (x86_64, Arm64, Arm7), and a
wide range of other options that can be selected on how Skia renders. Testing a
wide range of GPUs is required because different GPUs have different behaviors,
including some very buggy but widely deployed versions of OpenGL, so we current
test against a large number of both desktop and mobile GPUs. All of this
variety creates a combinatorial explosion in test data. For every commit to
Skia the tests result in roughly 800,000 performance metrics and one million
images being rendered. There are about 30 commits a day to the Skia repo, so
that ends up being a lot of data. Sure, not a lot compared to other projects in
Google, but Skia is open source, and we prefer to build all of our tooling also
as open source, and we needed to build tools to analyze and monitor all those
performance metrics and correctness images, and so we needed data storage with
the following requirements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Not an SQL database.&lt;/li&gt;
  &lt;li&gt;Very fast access for recent data to allow ad-hoc analysis.&lt;/li&gt;
  &lt;li&gt;Reasonable access for older data.&lt;/li&gt;
  &lt;li&gt;Commit based organization.&lt;/li&gt;
  &lt;li&gt;Robust, i.e. we can’t lose data.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The requirement that it not be an SQL database is a personal preference, I’m
sure there are a large contingent of people that will tell me that Postgres is
the perfect solution, but apparently I’m not smart enough to run/use/tune an
SQL database, particularly for large amounts of data. I might give &lt;a href=&quot;https://cloud.google.com/spanner/&quot;&gt;Spanner&lt;/a&gt; a
chance  in the future, and if so I will certainly give an update. &lt;a href=&quot;https://cloud.google.com/bigquery/&quot;&gt;BigQuery&lt;/a&gt;
might also work. Regardless, we built these apps a long time before either
Spanner or BigQuery were available, so they weren’t viable options at the time.&lt;/p&gt;

&lt;p&gt;One of the other odd requirements is the commit based organization of the data.
This is obviously because the data needs to align with the commits to Skia, but
it isn’t that straightforward because tests on different machines take
different amounts of time, and we also continually backfill tests when we have
spare capacity, so test results almost never arrive in order.&lt;/p&gt;

&lt;p&gt;Since there wasn’t a single system that could meet all these requirements we
split the problem into two systems, one for robust storage, and a second system
for fast access for real time analysis.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Robust storage (GCS) - The ‘source of truth’ documents are stored in Google Cloud Storage.&lt;/li&gt;
  &lt;li&gt;Fast Access (Tile Store) - An intermediate form, built on key-value stores, such as BoltDB, organized into chunks of commits called tiles.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Storing the source of truth documents on Google Cloud Storage takes care of the
robustness. The data files are all JSON and PNG images, which is what is
emitted by the tools that do the performance and correctness testing. The JSON
files are written out to a unique name which include year/month/day/hour in the
path. This allows for easy rebuilding of the Tile Store, just scan for all the
files based on the year/month/day/hour over your desired time range and ingest
them into the Tile Store. And given that the Tile Store can be rebuilt easily
from the ‘source of truth’ documents, we don’t need to back them up.&lt;/p&gt;

&lt;p&gt;The Tile Store is optimized for very fast writes and fast querying.
Additionally, we run on machines large enough to keep all the data for the last
100 commits in memory for very fast access, refreshed from the tiles
periodically.&lt;/p&gt;

&lt;p&gt;For trace data we store each point as a pair, the index of the point and then
the value of the trace at that point. That is, if the tile size is 50 then each
point in a trace is at an index in [0, 49]. So the values stored for a trace
might look like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[0, 1.23], [1, 3.21], [2, 5.67], ...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Note that the points may not arrive in order, so they could actually be stored
as:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[2, 5.67], [0, 1.23], [1, 3.21], ...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Also note that points are only appended, and the last value for a point is the
one that’s used, so duplicate data may exist in the trace:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[2, 5.67], [0, 1.23], [1, 3.21], [2, 5.50], ...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This can happen if a test is re-run, we always use the latter value, so the
value at index 2 of this trace will be 5.50, not 5.67.&lt;/p&gt;

&lt;p&gt;You can check out the &lt;a href=&quot;https://godoc.org/go.skia.org/infra/perf/go/ptracestore&quot;&gt;code and documentation&lt;/a&gt; if you are interested in the
details of the how the tiles are structured.&lt;/p&gt;

&lt;p&gt;I wrote this up mostly as a historical marker, since by next year we might be
fully on Spanner or some other storage technology, and also to find out how
other people have solved similar problems.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: I just recently came across this talk
&lt;a href=&quot;https://www.confluent.io/blog/turning-the-database-inside-out-with-apache-samza/&quot;&gt;Turning the database inside-out with Apache Samza&lt;/a&gt;,
and realized this is very similar, i.e. we use Google Cloud Storage as our
streaming log, and the Tile Store is our Materialized View.&lt;/p&gt;</content><author><name></name></author><summary type="html">My team at Google is the infrastructure team for Skia:</summary></entry><entry><title type="html">L-Systems</title><link href="https://bitworking.org/news/2017/07/l-systems" rel="alternate" type="text/html" title="L-Systems" /><published>2017-07-02T00:00:00-04:00</published><updated>2017-07-02T00:00:00-04:00</updated><id>https://bitworking.org/news/2017/07/l-systems</id><content type="html" xml:base="https://bitworking.org/news/2017/07/l-systems">&lt;p&gt;
  &lt;a href=&quot;https://en.wikipedia.org/wiki/L-system&quot;&gt;L-Systems&lt;/a&gt; are cool. The amount of complexity, and
  naturalness of the forms you can get from such a tiny amount of code is
  amazing.
&lt;/p&gt;
  &lt;style type=&quot;text/css&quot; media=&quot;screen&quot;&gt;
    canvas {
    }
  &lt;/style&gt;

  &lt;canvas id=canvas width=400 height=600&gt;&lt;/canvas&gt;
  &lt;script id=src type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;
    (function () {
      var a = document.getElementById('canvas');
      var c = a.getContext(&quot;2d&quot;);
      function E(s) { return s ? (rules[s[0]] + E(s.substr(1))) : &quot;&quot; }
      M = Math
      r = M.random
      rules = {
        X: &quot;F-[[X]+X]+F[+FX]-X&quot;,
        F: &quot;FF&quot;,
        &quot;+&quot;: &quot;+&quot;,
        &quot;-&quot;: &quot;-&quot;,
        &quot;[&quot;: &quot;[&quot;,
        &quot;]&quot;: &quot;]&quot;,
      }
      L = E(E(E(E(E(&quot;X&quot;)))))
      ys = []
      function draw(x, y, len) {
        p = { x: x, y: y, a: 3 }
        st = []
        c.beginPath()
        c.moveTo(p.x, p.y)
        L.split(&quot;&quot;).forEach(function(ch) {
          if (ch == &quot;F&quot;) {
            p.x += len*M.sin(p.a)
            p.y += len*M.cos(p.a)
            c.lineTo(p.x, p.y)
            c.stroke()
          } else if (ch == &quot;-&quot;) {
            p.a += r()/2
          } else if (ch == &quot;+&quot;) {
            p.a -= r()/2
          } else if (ch == &quot;[&quot;) {
            st.push(JSON.parse(JSON.stringify(p)))
          } else if (ch == &quot;]&quot;) {
            p = st.pop()
            c.beginPath()
            c.moveTo(p.x, p.y)
          }
        })
      }
      for (i = 0; i &lt; a.height/2; i++) {
        ys.push(1-Math.sin(r()*Math.PI/2));
      }
      ys.sort(function(a, b) {return a-b});
      oneStep = function() {
        var v = ys.shift();
        if (v) {
          cl = 0|(1-v)*255
          c.strokeStyle = &quot;rgb(&quot;+[cl,cl,cl]+&quot;)&quot;
          draw(r()*(a.width+100)-50, v*(a.height+100), v*3+0.1)
        }
        window.setTimeout(oneStep, 1);
      }
      window.setTimeout(oneStep, 1);
    })();
  &lt;/script&gt;
  &lt;p&gt;
    The code is intentionally compact as I was intending to submit something
    along these lines to a &lt;a
      href=&quot;https://en.wikipedia.org/wiki/Code_golf&quot;&gt;code golf&lt;/a&gt;
    competition, but then got distracted.
  &lt;/p&gt;
  &lt;pre&gt;&lt;code id=code&gt;&lt;/code&gt;&lt;/pre&gt;
  &lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;
    document.getElementById('code').textContent = document.getElementById('src').textContent;
  &lt;/script&gt;</content><author><name></name></author><summary type="html">L-Systems are cool. The amount of complexity, and naturalness of the forms you can get from such a tiny amount of code is amazing.</summary></entry><entry><title type="html">Compute and Moore’s Law</title><link href="https://bitworking.org/news/2017/06/compute-and-moores-law" rel="alternate" type="text/html" title="Compute and Moore's Law" /><published>2017-06-21T00:00:00-04:00</published><updated>2017-06-21T00:00:00-04:00</updated><id>https://bitworking.org/news/2017/06/compute-and-moores-law</id><content type="html" xml:base="https://bitworking.org/news/2017/06/compute-and-moores-law">&lt;p&gt;This article from Technology Review,
&lt;a href=&quot;https://www.technologyreview.com/s/607917/how-ai-can-keep-accelerating-after-moores-law/&quot;&gt;How AI Can Keep Accelerating After Moore’s Law&lt;/a&gt;
is a good follow-on from a previous article
&lt;a href=&quot;https://www.technologyreview.com/s/601441/moores-law-is-dead-now-what/&quot;&gt;Moore’s Law Is Dead. Now What?&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;From the second article:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Engineers have kept GPUs getting more powerful because they can be more
specialized to the particular math they need to perform for graphics or
machine learning, he says.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In order to continue to squeeze more performance out of the same number of
transistors and/or watts, we are going to need to get closer to the metal, and
the metal is going to have to become more and more specialized, or at the very
least, the metal has to stop looking like monolithic CPUs with a small number
of cores.&lt;/p&gt;

&lt;p&gt;GPUs by themselves, even if you only have OpenGL, are attractive because
of the enormous amount of specialized computational power available. This power is what
originally attracted people to General Purpose GPU
&lt;a href=&quot;https://en.wikipedia.org/wiki/General-purpose_computing_on_graphics_processing_units&quot;&gt;GPGPU&lt;/a&gt;, which started as
people transforming scientific computations into a graphical form to get them
to run on a GPU. That work in turn drove the creation and adoption of general
compute APIs like CUDA and then OpenCL, which expose the underlying compute
units and specialized memory access features in a GPU.&lt;/p&gt;

&lt;p&gt;Compute APIs are much closer to the metal, exposing the underlying power of
the GPU without the intervening machinery and bugs of the OpenGL abstraction.
The API surface of these compute APIs are much smaller, which should mean
simpler and less buggy drivers. In addition the compute APIs are focused in
part on scientific applications, so the results from using compute APIs should
be much more repeatable. At the very least using compute APIs we are &lt;a href=&quot;https://www.khronos.org/registry/OpenCL/sdk/1.0/docs/man/xhtml/log.html&quot;&gt;in
control of what performance/accuracy tradeoff to make&lt;/a&gt;. Compute APIs are also
becoming more widely available, with every next generation API (Vulkan, DX12,
and Metal) supporting a compute component.&lt;/p&gt;

&lt;p&gt;One of the more surprising things I learned recently was exactly how sloppy
OpenGL could be. For example, from the &lt;a href=&quot;https://www.khronos.org/registry/OpenCL/sdk/1.0/docs/man/xhtml/log.html&quot;&gt;documentation for the OpenCL log
function&lt;/a&gt;,
you can choose between the native hardware accelerated version
of log, or use a log function that will return accurate results.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;native_log computes natural logarithm over an implementation-defined range. &lt;strong&gt;The maximum error is implementation-defined&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I think it’s time for me to find an OpenCL library for &lt;a href=&quot;https://golang.org&quot;&gt;Go&lt;/a&gt; and
start exploring &lt;a href=&quot;https://cloud.google.com/gpu/&quot;&gt;GPU’s on Google Compute Engine&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">This article from Technology Review, How AI Can Keep Accelerating After Moore’s Law is a good follow-on from a previous article Moore’s Law Is Dead. Now What?.</summary></entry><entry><title type="html">North Carolina Urbanization and Rural Flight</title><link href="https://bitworking.org/news/2017/06/north-carolina-urbanization" rel="alternate" type="text/html" title="North Carolina Urbanization and Rural Flight" /><published>2017-06-18T00:00:00-04:00</published><updated>2017-06-18T00:00:00-04:00</updated><id>https://bitworking.org/news/2017/06/north-carolina-urbanization</id><content type="html" xml:base="https://bitworking.org/news/2017/06/north-carolina-urbanization">&lt;p&gt;
  The rural areas of North Carolina are emptying out.
&lt;/p&gt;
&lt;style&gt;
  .tooltip {
    position: absolute;
    width: 200px;
    height: 28px;
    pointer-events: none;
  }

  text {
    font-size: 15px;
  }
&lt;/style&gt;

&lt;div id=plot&gt;&lt;/div&gt;

&lt;p style=&quot;text-align: center; font-size: 90%;&quot;&gt;
  &lt;a href=&quot;http://www.indexmundi.com/facts/united-states/quick-facts/north-carolina/population-growth#table&quot;&gt;
 North Carolina County Population vs Count Population Growth Rate (2010 -
 2014).&lt;/a&gt;&lt;br&gt;
 Click on the graph to toggle between population density and county
 population.
&lt;/p&gt;

&lt;p&gt;
  North Carolina is not immune to &lt;a
    href=&quot;https://en.wikipedia.org/wiki/Rural_flight&quot;&gt;Rural Flight&lt;/a&gt;, nor is
  it a special victim, as the phenomenon is happening world wide.
  Countrysides around the world are emptying out.
&lt;/p&gt;

&lt;iframe style=&quot;margin: 1em 2em;&quot; width=&quot;560&quot; height=&quot;315&quot;
  src=&quot;https://www.youtube.com/embed/B67LTsGENPQ&quot; frameborder=&quot;0&quot;
  allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
  It's important to keep these broader patterns in mind, first so you don't
  go &lt;a
    href=&quot;http://www.roanoke-chowannewsherald.com/2015/12/08/woodland-rejects-solar-farm/&quot;&gt;
    blaming random local events that look like correlation&lt;/a&gt;:
&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;
    Mary Hobbs has been living in Woodland for 50 years and said she has
    watched it slowly becoming a ghost town with no job opportunities for
    young people.
  &lt;/p&gt;
  &lt;p&gt;
    She said her home is surrounded by solar farms and is no longer worth its
    value because of those facilities.
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And from the same article:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;
    Bobby Mann said he watched communities dry up when I-95 came along and
    warned that would happen to Woodland because of the solar farms.
  &lt;/p&gt;
  &lt;p&gt;
    “You’re killing your town,” he said. “All the young people are going to
    move out.”
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
  But also so that when trying to &lt;a
    href=&quot;http://www.ncruralcenter.org/about-us/news/756-ruralurban-coalitions-highlighted-during-election-season&quot;&gt;formulate
    policy&lt;/a&gt; we temper trying to stop rural flight, which is probably
  impossible, with programs to help with relocation and the humane winding down of rural towns,
  because the &lt;a href=&quot;http://www.radiolab.org/story/seneca-nebraska/&quot;&gt;alternatives are
    pretty grim&lt;/a&gt;. And yes, let me state explicitly what I'm implying
  above, which is that people might have to move. Just like companies are not
  owed a business model, people aren't owed the job of their choice brought
  to their doorstop. But what should also be acknowledged is that moving
  for the poor is incredibly difficult and that any solutions proposed should
  address that gap.
&lt;/p&gt;

&lt;script src=&quot;https://d3js.org/d3.v4.min.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;
(function () {
  var margin = {top: 20, right: 20, bottom: 60, left: 60},
    width = 640 - margin.left - margin.right,
    height = 480 - margin.top - margin.bottom;

  var xlabels = [&quot;Density (people/mi^2)&quot;, &quot;Population per County (100K)&quot;];

  var x = d3.scalePow().exponent(1/10).range([0, width]);
  var y = d3.scaleLinear().range([height, 0]);

  var svg = d3.select(&quot;#plot&quot;).append(&quot;svg&quot;)
    .attr(&quot;width&quot;, width + margin.left + margin.right)
    .attr(&quot;height&quot;, height + margin.top + margin.bottom)
    .append(&quot;g&quot;)
    .attr(&quot;transform&quot;,
      &quot;translate(&quot; + margin.left + &quot;,&quot; + margin.top + &quot;)&quot;);

  var tooltip = d3.select(&quot;#plot&quot;).append(&quot;div&quot;)
    .attr(&quot;class&quot;, &quot;tooltip&quot;)
    .style(&quot;opacity&quot;, 0);

  var line = svg.append('line')
    .attr('id', 'fit')
    .attr('stroke-width', '2')
    .attr('stroke', 'grey');

  var data = [
    // Name, % change, population, size
    [&quot;Alamance&quot;,3,155792, 435],
    [&quot;Alexander&quot;,0.5,37392, 263],
    [&quot;Alleghany&quot;,-2.5,10879, 236],
    [&quot;Anson&quot;,-4.4,25765, 537],
    [&quot;Ashe&quot;,-0.6,27126, 427],
    [&quot;Avery&quot;,-0.1,17773, 247],
    [&quot;Beaufort&quot;,-0.4,47585, 959],
    [&quot;Bertie&quot;,-5.6,20106, 741],
    [&quot;Bladen&quot;,-1.5,34657, 887],
    [&quot;Brunswick&quot;,10.6,118836, 860],
    [&quot;Buncombe&quot;,5.1,250539, 660],
    [&quot;Burke&quot;,-1.6,89486, 515],
    [&quot;Cabarrus&quot;,7.8,192103, 365],
    [&quot;Caldwell&quot;,-1.9,81484, 474],
    [&quot;Camden&quot;,3.5,10331, 306],
    [&quot;Carteret&quot;,3.5,68811, 1341],
    [&quot;Caswell&quot;,-2.7,23082, 428],
    [&quot;Catawba&quot;,0.1,154534, 414],
    [&quot;Chatham&quot;,8.2,68698, 709],
    [&quot;Cherokee&quot;,-1.1,27141, 497],
    [&quot;Chowan&quot;,-1.5,14572, 233],
    [&quot;Clay&quot;,-0.1,10581, 221],
    [&quot;Cleveland&quot;,-1,97076,469 ],
    [&quot;Columbus&quot;,-2,56953, 954],
    [&quot;Craven&quot;,1,104510, 774],
    [&quot;Cumberland&quot;,2.2,326328, 658],
    [&quot;Currituck&quot;,6.1,24976, 526],
    [&quot;Dare&quot;,3.5,35104, 1562],
    [&quot;Davidson&quot;,0.7,164072, 567],
    [&quot;Davie&quot;,0.5,41434, 267],
    [&quot;Duplin&quot;,2.4,59882, 819],
    [&quot;Durham&quot;,9.1,294460, 298],
    [&quot;Edgecombe&quot;,-2.9,54933, 507],
    [&quot;Forsyth&quot;,4.2,365298, 413],
    [&quot;Franklin&quot;,3.7,62860, 495],
    [&quot;Gaston&quot;,2.4,211127, 364],
    [&quot;Gates&quot;,-5.1,11567, 346],
    [&quot;Graham&quot;,-2.4,8644, 302],
    [&quot;Granville&quot;,1.7,58500, 537],
    [&quot;Greene&quot;,-1.3,21093, 266],
    [&quot;Guilford&quot;,4.9,512119, 658],
    [&quot;Halifax&quot;,-3.1,52970, 731],
    [&quot;Harnett&quot;,10.5,126666, 601],
    [&quot;Haywood&quot;,0.7,59471, 555],
    [&quot;Henderson&quot;,4.1,111149, 375],
    [&quot;Hertford&quot;,-1.4,24308, 360],
    [&quot;Hoke&quot;,9.9,51611, 392],
    [&quot;Hyde&quot;,-2.3,5676, 1424],
    [&quot;Iredell&quot;,4.5,166675, 597],
    [&quot;Jackson&quot;,1.8,40981, 494],
    [&quot;Johnston&quot;,7.4,181423, 796],
    [&quot;Jones&quot;,-0.8,10076, 473],
    [&quot;Lee&quot;,3.1,59662, 259],
    [&quot;Lenoir&quot;,-1.7,58485, 402],
    [&quot;Lincoln&quot;,2,79829, 307],
    [&quot;Macon&quot;,-0.1,33875, 519],
    [&quot;Madison&quot;,1.8,21157, 452],
    [&quot;Martin&quot;,-4.3,23454, 461],
    [&quot;McDowell&quot;,-0.1,44965, 446],
    [&quot;Mecklenburg&quot;,10.1,1012539, 546],
    [&quot;Mitchell&quot;,-1.7,15311, 222],
    [&quot;Montgomery&quot;,-1.4,27395, 502],
    [&quot;Moore&quot;,5.5,93077, 706],
    [&quot;Nash&quot;,-1.5,94357, 543],
    [&quot;New Hanover&quot;,6.7,216298, 328],
    [&quot;Northampton&quot;,-7.4,20463, 551],
    [&quot;Onslow&quot;,5.5,187589, 909],
    [&quot;Orange&quot;,5,140420, 401],
    [&quot;Pamlico&quot;,-1.5,12948, 566],
    [&quot;Pasquotank&quot;,-2.1,39787, 289],
    [&quot;Pender&quot;,7.8,56250, 933],
    [&quot;Perquimans&quot;,0.1,13466, 329],
    [&quot;Person&quot;,-0.8,39132, 404],
    [&quot;Pitt&quot;,4.3,175354, 655],
    [&quot;Polk&quot;,-0.7,20357, 239],
    [&quot;Randolph&quot;,0.7,142778, 790],
    [&quot;Richmond&quot;,-1.9,45733, 480],
    [&quot;Robeson&quot;,0.4,134760, 951],
    [&quot;Rockingham&quot;,-2.1,91696, 572],
    [&quot;Rowan&quot;,0.1,138630, 524],
    [&quot;Rutherford&quot;,-1.8,66600, 566],
    [&quot;Sampson&quot;,1,64050, 947],
    [&quot;Scotland&quot;,-1.6,35576, 321],
    [&quot;Stanly&quot;,0,60600, 404],
    [&quot;Stokes&quot;,-2.1,46419, 456],
    [&quot;Surry&quot;,-1,72968, 538],
    [&quot;Swain&quot;,2.1,14274, 541],
    [&quot;Transylvania&quot;,-0.1,33045, 381],
    [&quot;Tyrrell&quot;,-6.6,4115, 600],
    [&quot;Union&quot;,8.6,218568, 640],
    [&quot;Vance&quot;,-1.8,44614, 270],
    [&quot;Wake&quot;,10.8,998691, 857],
    [&quot;Warren&quot;,-3.5,20231, 444],
    [&quot;Washington&quot;,-4.9,12570, 424],
    [&quot;Watauga&quot;,2.9,52560, 313],
    [&quot;Wayne&quot;,1.5,124456, 557],
    [&quot;Wilkes&quot;,-0.7,68838, 760],
    [&quot;Wilson&quot;,0.2,81401, 374],
    [&quot;Yadkin&quot;,-1.6,37792, 337],
    [&quot;yancey&quot;,-1.1,17614, 313]
  ]

  var mode = 0;

  function calcDerivedColumn() {
    if (mode ==0) {
      data.forEach(function(d) {
        d[4] = d[2]/d[3];
      });
    } else {
      data.forEach(function(d) {
        d[4] = d[2]/100000;
      });
    }
  }

  calcDerivedColumn();

  svg.append('text')
    .attr('transform', 'rotate(-90)')
    .attr('dx', '-20em')
    .attr('dy', '-2em')
    .text('County Population Change (%)');

  svg.append('text')
    .attr('transform', `translate(${width/2},${height + 2*margin.bottom/3})`)
    .attr('dx', '-8em')
    .attr('id', 'xlabel')
    .text(xlabels[mode]);

  svg.append('text')
    .attr('id', 'r')
    .attr('dx', '25em')
    .attr('dy', '20em')
    .text('r=');

  x.domain(d3.extent(data, function(d) { return d[4]; }));
  y.domain(d3.extent(data, function(d) { return d[1]; }));

  function plotLine(t) {
    var xSeries=[];
    var ySeries=[];
    data.forEach(function(d) {
      xSeries.push(Math.log10(d[4]));
      ySeries.push(d[1]);
    });

    var ls = leastSquares(xSeries, ySeries);
    xSeries.sort(function(a, b) {
      return a - b;
    });
    var x1= xSeries[0];
    var y1= ls.m * x1 + ls.b;
    var x2= xSeries[xSeries.length-1];
    var y2= ls.m * x2 + ls.b;
    x1 = Math.pow(10, x1);
    x2 = Math.pow(10, x2);
    svg.selectAll('#fit').transition(t)
      .attr('x1', x(x1))
      .attr('y1', y(y1))
      .attr('x2', x(x2))
      .attr('y2', y(y2));
    svg.selectAll('#r')
      .text('r=' + ls.r.toPrecision(2));
  }
  plotLine(d3.transition());

  // Enter the scatterplot.
  svg.selectAll(&quot;circle&quot;)
    .data(data)
    .enter().append(&quot;circle&quot;)
    .attr(&quot;r&quot;, 5)
    .attr(&quot;cx&quot;, function(d) { return x(d[4]); })
    .attr(&quot;cy&quot;, function(d) { return y(d[1]); })
    .attr(&quot;fill&quot;, function(d) { return d[1] &lt; 0 ? &quot;#ff3333&quot; : &quot;#009999&quot;; })
    .attr(&quot;title&quot;, function(d) { return d[0]; })
    .on(&quot;mouseover&quot;, function(d) {
      tooltip.transition()
        .duration(200)
        .style(&quot;opacity&quot;, .9);
      tooltip.html(d[0])
        .style(&quot;left&quot;, (d3.event.pageX + 5) + &quot;px&quot;)
        .style(&quot;top&quot;, (d3.event.pageY - 28) + &quot;px&quot;);
    })
    .on(&quot;mouseout&quot;, function(d) {
      tooltip.transition()
        .duration(500)
        .style(&quot;opacity&quot;, 0);
    });
  d3.selectAll(&quot;svg&quot;)
    .on(&quot;click&quot;, function(d) {
      toggle();
    });

  // Add the X Axis
  svg.append(&quot;g&quot;)
    .attr(&quot;transform&quot;, &quot;translate(0,&quot; + height + &quot;)&quot;)
    .attr(&quot;id&quot;, &quot;xaxis&quot;)
    .call(d3.axisBottom(x));

  // Add the Y Axis
  svg.append(&quot;g&quot;)
    .call(d3.axisLeft(y));

  function toggle() {
    mode = (mode+1)%2;
    var t = d3.transition()
      .duration(750);

    svg.selectAll('#xlabel')
      .text(xlabels[mode]);

    calcDerivedColumn();
    x.domain(d3.extent(data, function(d) { return d[4]; }));
    y.domain(d3.extent(data, function(d) { return d[1]; }));
    plotLine(t);
    svg.selectAll(&quot;circle&quot;)
      .data(data, function(d) { return d; })
      .transition(t)
      .attr(&quot;cx&quot;, function(d) { return x(d[4]); })

    d3.selectAll(&quot;#xaxis&quot;)
      .call(d3.axisBottom(x));
  }

  function leastSquares(xSeries, ySeries) {
    var reduceSumFunc = function(prev, cur) { return prev + cur; };

    var xBar = xSeries.reduce(reduceSumFunc) * 1.0 / xSeries.length;
    var yBar = ySeries.reduce(reduceSumFunc) * 1.0 / ySeries.length;

    var ssXX = xSeries.map(function(d) { return (d-xBar)*(d-xBar); })
      .reduce(reduceSumFunc);

    var ssYY = ySeries.map(function(d) { return (d-yBar)*(d-yBar); })
      .reduce(reduceSumFunc);

    var ssXY = xSeries.map(function(d, i) { return (d - xBar) * (ySeries[i] - yBar); })
      .reduce(reduceSumFunc);

    var slope = ssXY / ssXX;
    var intercept = yBar - (xBar * slope);
    var r = ssXY / (Math.sqrt(ssXX) * Math.sqrt(ssYY));

    return {m: slope, b: intercept, r: r};
  }

})();
&lt;/script&gt;</content><author><name></name></author><summary type="html">The rural areas of North Carolina are emptying out. .tooltip { position: absolute; width: 200px; height: 28px; pointer-events: none; }</summary></entry><entry><title type="html">Noisy Frogs</title><link href="https://bitworking.org/news/2017/06/noisy-frogs" rel="alternate" type="text/html" title="Noisy Frogs" /><published>2017-06-15T00:00:00-04:00</published><updated>2017-06-15T00:00:00-04:00</updated><id>https://bitworking.org/news/2017/06/noisy-frogs</id><content type="html" xml:base="https://bitworking.org/news/2017/06/noisy-frogs">&lt;p&gt;Why yes, the frogs in the pond across the road are rather loud.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/noisy_frogs_small.png&quot; alt=&quot;Graph showing a peak noise level of 72 dB.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;BTW,
&lt;a href=&quot;https://play.google.com/store/apps/details?id=com.google.android.apps.forscience.whistlepunk&amp;amp;hl=en&quot;&gt;Google Science Journal&lt;/a&gt;
is awesome.&lt;/p&gt;</content><author><name></name></author><summary type="html">Why yes, the frogs in the pond across the road are rather loud.</summary></entry></feed>